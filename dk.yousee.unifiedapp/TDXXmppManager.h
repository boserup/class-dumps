//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class NSString, NSTimer, TDXXmppData, XMPPAutoPing, XMPPReconnect, XMPPStream;

__attribute__((visibility("hidden")))
@interface TDXXmppManager : NSObject
{
    BOOL _customCertEvaluation;
    BOOL _allowSelfSignedCertificates;
    BOOL _allowSSLHostNameMismatch;
    BOOL _autoConnectAfterDisconnect;
    BOOL _isPlaying;
    BOOL _reconnectStarted;
    XMPPStream *_xmppStream;
    XMPPReconnect *_xmppReconnect;
    NSString *_password;
    TDXXmppData *_xmppData;
    NSTimer *_expiryTimer;
    XMPPAutoPing *_xmppAutoPing;
}

+ (id)sharedInstance;
@property(nonatomic) BOOL reconnectStarted; // @synthesize reconnectStarted=_reconnectStarted;
@property(nonatomic) BOOL isPlaying; // @synthesize isPlaying=_isPlaying;
@property(retain, nonatomic) XMPPAutoPing *xmppAutoPing; // @synthesize xmppAutoPing=_xmppAutoPing;
@property(retain, nonatomic) NSTimer *expiryTimer; // @synthesize expiryTimer=_expiryTimer;
@property(nonatomic) BOOL autoConnectAfterDisconnect; // @synthesize autoConnectAfterDisconnect=_autoConnectAfterDisconnect;
@property(retain, nonatomic) TDXXmppData *xmppData; // @synthesize xmppData=_xmppData;
@property(nonatomic) BOOL allowSSLHostNameMismatch; // @synthesize allowSSLHostNameMismatch=_allowSSLHostNameMismatch;
@property(nonatomic) BOOL allowSelfSignedCertificates; // @synthesize allowSelfSignedCertificates=_allowSelfSignedCertificates;
@property(nonatomic) BOOL customCertEvaluation; // @synthesize customCertEvaluation=_customCertEvaluation;
@property(retain, nonatomic) NSString *password; // @synthesize password=_password;
@property(retain, nonatomic) XMPPReconnect *xmppReconnect; // @synthesize xmppReconnect=_xmppReconnect;
@property(retain, nonatomic) XMPPStream *xmppStream; // @synthesize xmppStream=_xmppStream;
- (void).cxx_destruct;
- (BOOL)xmppReconnect:(id)arg1 shouldAttemptAutoReconnect:(unsigned int)arg2;
- (void)xmppReconnect:(id)arg1 didDetectAccidentalDisconnect:(unsigned int)arg2;
- (void)xmppStreamDidDisconnect:(id)arg1 withError:(id)arg2;
- (void)xmppStreamConnectDidTimeout:(id)arg1;
- (void)xmppStream:(id)arg1 didReceiveError:(id)arg2;
- (void)xmppStream:(id)arg1 didReceivePresence:(id)arg2;
- (void)xmppStream:(id)arg1 didReceiveMessage:(id)arg2;
- (BOOL)xmppStream:(id)arg1 didReceiveIQ:(id)arg2;
- (void)xmppStream:(id)arg1 didNotAuthenticate:(id)arg2;
- (void)xmppStreamDidAuthenticate:(id)arg1;
- (void)xmppStreamDidSecure:(id)arg1;
- (void)xmppStreamDidConnect:(id)arg1;
- (void)didReceiveTrust:(id)arg1;
- (void)xmppStream:(id)arg1 willSecureWithSettings:(id)arg2;
- (void)xmppStream:(id)arg1 socketDidConnect:(id)arg2;
- (void)stopPlaying;
- (void)startPlayingItem:(id)arg1 streamUrl:(id)arg2 position:(int)arg3;
- (void)handleNetworkChanges;
- (void)appWillEnterForeground;
- (void)appDidEnterBackground;
- (BOOL)mustReconnectToXMPP;
- (void)disconnect;
- (BOOL)connect;
- (void)goOffline;
- (void)goOnline;
- (id)capabilityElement;
- (void)tearDownStream;
- (void)setupStream;
- (void)renewTokenAndConnect;
- (BOOL)isTokenUpToDate;
- (void)handleLogout;
- (void)setXmppDataAndConnect:(id)arg1;
- (id)flavour;
- (void)dealloc;
- (id)init;

@end

